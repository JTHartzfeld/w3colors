#define __W3COLORS_C__
#include <stdlib.h>
#include "w3colors.h"

W3ColorGroup* new_w3colorgroup(int count, ...) {
    if(count<1)
        return NULL;
    
    va_list names;
    va_start(names, count);
    const char** output_names = (const char**)calloc(count, sizeof(const char*));
    if (output_names == NULL)
        return (W3ColorGroup*)NULL;
        
    for(int i=0; i<count; i++) {
        output_names[i]=va_arg(names, const char*);
    }
    va_end(names);
    
    W3ColorGroup* output 	= (W3ColorGroup*)calloc(1, sizeof(W3ColorGroup));
    if (output == NULL)
        return output;
        
    output->len 			= count;
    output->aliases 		= output_names;
    
    return output;
}



char* tosquishname(const char* name) {
    int len = strlen(name);
    char* buffer = (char*)calloc(len, sizeof((char)' '));
    if (buffer==NULL)
        return buffer;
    
    int j=0;
    for(int i=0; i<len; i++) {
        if((name[i]==' ') || (name[i]=='-'))
            continue;
        else {
            buffer[j++]=(char)tolower((int)name[i]);
        }
    }
    buffer[j]='\0';
    buffer = (char*)reallocarray(buffer, ++j, sizeof((char)' '));
    return buffer;
}

int add_w3color(const char* name, int r, int g, int b) {
    if (w3color(name)>=0)
        return set_w3color(name, r, g, b);
        
    if (num_w3colors+1 == max_w3colors) {
        max_w3colors += ADTNL_COLORS_COUNT;
        W3ColorGroup** colorgroups = (W3ColorGroup**)reallocarray(w3colorgroups, 
                                        max_w3colors, 
                                        sizeof(W3ColorGroup*)
                    );
        if (colorgroups==NULL)
            return FALSE;
        w3colorgroups = colorgroups;
    }
    w3colorgroups[num_w3colors++] = new_w3colorgroup(1, name);
    return TRUE;
}

int set_w3color(const char* name, int r, int g, int b) {
    int i = w3color(name);
    if (i < 0)
        if (add_w3color(name, r, g, b) == FALSE)
            return FALSE;
            
    init_color(w3color(name), r, b, g);
    return TRUE;
}
int set_w3color_256(const char* name, int r, int g, int b) {
    return set_w3color(name, 
                (int)(1000*r)/255,
                (int)(1000*g)/255,
                (int)(1000*b)/255);
}

int add_w3color_alias(const char* name, const char* alias) {    
    int i = w3color(name);
    if (i<0)
        return FALSE;
    int j = (w3colorgroups[i]->len)++;
    const char** aliases = reallocarray(w3colorgroups[i]->aliases,
                                        j+1, 
                                        sizeof(W3ColorGroup*));
    if (aliases != NULL)
        w3colorgroups[i]->aliases = aliases;
    else
        return FALSE;
            
    w3colorgroups[i]->aliases[j]=alias;
    return TRUE;
}

short w3color(const char* name) {
    int len;
    char* squishname = tosquishname(name);
    char* tmp = calloc(1,1);
    for(short i=0; i<num_w3colors; i++) {
        len = w3colorgroups[i]->len;
        for(short j=0; j<len; j++) {
            tmp = tosquishname(w3colorgroups[i]->aliases[j]);
            if(strcmp(squishname, tmp)==0) {
                free(tmp);
                return i;
            }
            free(tmp);
        }
    }
    free(squishname);
    return -1;
}

int init_w3colors() {
    if(has_colors() && can_change_color()) {
		start_color();
	
	// Initialize all the colors.
{INITIALIZATIONS_BLOCK}

	// Initialize the w3colorgroups array
	    max_w3colors = COLORS_COUNT + ADTNL_COLORS_COUNT;
    	num_w3colors = COLORS_COUNT;
    	w3colorgroups = calloc(max_w3colors, sizeof(W3ColorGroup*));
{W3COLORNAMES}
    } else
        return FALSE;
    return TRUE;
}

int free_w3colors() {
    for(int i = 0; i<num_w3colors; i++) {
        free(w3colorgroups[i]);
    }
    free(w3colorgroups);
    return 0;
}

#undef __W3COLORS_C__
